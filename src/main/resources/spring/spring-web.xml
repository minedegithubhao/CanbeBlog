<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop.xsd">
	<!--配置Spring MVC-->
	<!--1：开启Spring MVC注解模式-->
	<!--简化配置：
        (1)主动注册DefaultAnnotationHandlerMapping,AnnotationMethodHandlerAdapter
        (2)提供一系列：数据绑定，数字和日期format @NumberFormat,@DataTimeFormat,xml,json默认读写支持
    -->
	<mvc:annotation-driven />

	<!--2:静态资源默认servlet配置
        1.加入对静态资源的处理
        2.允许使用"/"做整体映射
        servlet在查找资源时，会按照DispatcherServlet路线进行查找，找不到就会404。但是在加上这个默认的servlet之后，找不到就会去查找静态内容。
       相应的还有<mvc:resource>这样的注解
       如果在web.xml中的配置不是"/"而是"get*.action”这样的话就不会出现找不到，如果是使用"/"就会出现上述结果
    -->
	 <mvc:default-servlet-handler/>

	<!-- 将swagger引入IOC容器  -->
	<!-- 如果这里引用了swagger的默认配置，那么就不用在本地项目中编写SwaggerConfig.java了，当请求swagger-ui.html时会直接去springfox-swagger2-2.9.2.jar中访问/v2/api-doc接口
	  	优点：不必引入Swagger相关静态资源
	  	缺点：无法对swagger自定义
	  -->
	<!-- 自动扫描swagger配置文件,写入swagger资源路径映射 -->
	<bean class="springfox.documentation.swagger2.configuration.Swagger2DocumentationConfiguration" id="swagger2Config"/>

	<!-- 3.配置jsp 显示ViewResolver -->
	 <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	 	<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		 <property name="prefix" value="/WEB-INF/jsp/" />
	 	<property name="suffix" value=".jsp" />
	 </bean>

	<context:component-scan base-package="com.cxd.controller" />
</beans>